Input: nums = [2,0,2,1,1,0]
Output: [0,0,1,1,2,2]

Solution-1(Two pointers) :
class Solution {
    public void sortColors(int[] nums) {
        int j=0;
        int n=nums.length-1;
        for(int i=0;i<=n;i++){
            if(nums[i]==0){
                int temp=nums[i];
                nums[i]=nums[j];
                nums[j]=temp;
                j++;
            }
            if(nums[i]==2){
                int temp=nums[i];
                nums[i]=nums[n];
                nums[n]=temp;
                n--;
                i--;
            }
        }
    }
}

Solution-2 (Counting) :

class Solution {
    public void sortColors(int[] nums) {
        int cnt0=0;
        int cnt1=0;
        int cnt2=0;
        for(int i=0;i<nums.length;i++){
            if(nums[i]==0) cnt0++;
            else if(nums[i]==1) cnt1++;
            else if(nums[i]==2) cnt2++;
        }
        int i=0;
        while(i<nums.length){
            while(cnt0!=0){
                nums[i]=0;
                cnt0--;
                i++;
            }
            while(cnt1!=0){
                nums[i]=1;
                cnt1--;
                i++;
            }
            while(cnt2!=0){
                nums[i]=2;
                cnt2--;
                i++;
            }
        }
    }
}

Solution-3 (Dutch National Flag Algorithm):
class Solution {
    public void sortColors(int[] nums) {
        int low=0;
        int mid=0;
        int high=nums.length-1;
        while(mid<=high){
            if(nums[mid]==0){
                int temp=nums[low];
                nums[low]=nums[mid];
                nums[mid]=temp;
                low++;
                mid++;
            }
            else if(nums[mid]==1){
                mid++;
            }
            else if(nums[mid]==2){
                int temp=nums[mid];
                nums[mid]=nums[high];
                nums[high]=temp;
                high--;
            }
        }
    }
}