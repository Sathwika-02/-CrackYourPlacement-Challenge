You are given an array prices where prices[i] is the price of a given stock on the ith day.
You want to maximize your profit by choosing a single day to buy one stock and choosing a different day in the future to sell that stock.
Return the maximum profit you can achieve from this transaction. If you cannot achieve any profit, return 0

Input: prices = [7,1,5,3,6,4]
Output: 5
Explanation: Buy on day 2 (price = 1) and sell on day 5 (price = 6), profit = 6-1 = 5.
Note that buying on day 2 and selling on day 1 is not allowed because you must buy before you sell.

7 1 5 3 6 4
7 6 6 6 6 -1
ans=6-1 =5

Solution:

class Solution {
    public int maxProfit(int[] prices) {
        int []max=new int[prices.length];
        max[prices.length-1]=-1;
        int maxi=prices[prices.length-1];
        for(int i=prices.length-2;i>=0;i--){
            if(maxi<prices[i]){
                maxi=prices[i];
            }
            max[i]=maxi;
            
        }
        int ans=0;
        for(int i=0;i<prices.length;i++){
            ans=Math.max(ans,max[i]-prices[i]);
        }
        return ans;
    }
}